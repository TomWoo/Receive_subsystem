library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity sequence_detector is
port(
	reset:					in std_logic;
	clk_phy:					in std_logic;
	
	data_in:					in std_logic;
	data_out:				out std_logic
);
end entity;

architecture struct of sequence_detector is
	
begin

-- Asynchronous signals
process(all) begin
	usedw_hi <= to_integer(unsigned(numusedhi));
	usedw_lo <= to_integer(unsigned(numusedlo));
	
--	if((32768-usedw_hi>=frame_len and in_priority='1') or
--		(32768-usedw_lo>=frame_len and in_priority='0')) then
	if((usedw_hi<30000 and in_priority='1') or
		(usedw_lo<30000 and in_priority='0')) then
		mem_avail <= '1';
	else
		mem_avail <= '0';
	end if;
	
	frame_seq_num_out <= std_logic_vector(to_unsigned(frame_seq_num, 12));
end process;

process(clk_sys, reset, controli) begin
	if(reset = '1') then
		frame_len <= 0; --to_integer(unsigned(controli(11 downto 0)));
		
		frame_seq_num <= 0;
	elsif(rising_edge(clk_sys)) then
		if(wrenc = '1') then
			frame_len <= to_integer(unsigned(controli(11 downto 0)));
		end if;
		
		if(stop = '1') then
			frame_seq_num <= frame_seq_num + 1;
		end if;
	end if;
end process;

-- Moore machine
process(clk_sys, reset) begin
	if(reset = '1') then
		my_state <= s_idle;
		count <= 0;
	elsif(rising_edge(clk_sys)) then
		case my_state is
		when s_idle =>
			if(wrenc = '1' and mem_avail = '1') then
				my_state <= s_stream;
				count <= 0;
			elsif(wrenc = '1') then
				my_state <= s_discard;
				count <= 0;
			end if;
		when others => -- s_stream or s_discard
			if(count = frame_len-1) then -- TODO: wrend = '1'?
				my_state <= s_idle;
				count <= 0;
			else
				count <= count + 1;
			end if;
		end case;
		
		controlo <= controli;
		datao <= datai;
		out_priority <= in_priority;
		start <= wrenc;
		
		if(count = frame_len-2) then -- subtle but important -2!
			stop <= '1';
		else
			stop <= '0';
		end if;
	end if;
end process;

-- Output signals
process(all) begin
	case my_state is
	when s_idle =>
		out_m_discard_en <= '0';
		out_wren <= '0';
	when s_stream =>
		out_m_discard_en <= '0';
		out_wren <= '1';
	when others => -- s_discard
		out_m_discard_en <= '1';
		out_wren <= '0';
	end case;
end process;

end architecture;
